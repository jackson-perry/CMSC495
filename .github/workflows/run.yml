# This is a basic workflow to help you get started with Actions

name: CI
# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env: 
  app_id: ${{ secrets.APP_ID}}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Set FLASK_ENV for production
        run: echo "FLASK_ENV=production" >> $GITHUB_ENV

      - name: setup venv
        run: |
          python3 -m venv .venv
          source .venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
      # Runs a single command using the runners shell
      - name: Start Flask server in background
        run: |
          source .venv/bin/activate
          FLASK_APP=src/app.py flask run --port=5000 &
          echo $! > flask_pid.txt
          sleep 5  # wait for server to start

      - name: Test Flask app route
        run: |
          curl http://127.0.0.1:5000/  # replace with appropriate endpoint
          
      - name: Stop Flask server
        run: |
          kill $(cat flask_pid.txt)
